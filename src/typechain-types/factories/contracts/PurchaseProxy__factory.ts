/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PurchaseProxy,
  PurchaseProxyInterface,
} from "../../contracts/PurchaseProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "storeAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "ownerID",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "claimPurchaseIDs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "owner",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "ownerID",
        type: "uint32",
      },
    ],
    name: "purchaseItem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200119b3803806200119b833981810160405281019062000037919062000309565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a491906200034c565b60405180910390fd5b620000be81620001db60201b60201c565b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356397c356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200016e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001949190620003ae565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620003e0565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002d182620002a4565b9050919050565b620002e381620002c4565b8114620002ef57600080fd5b50565b6000815190506200030381620002d8565b92915050565b6000602082840312156200032257620003216200029f565b5b60006200033284828501620002f2565b91505092915050565b6200034681620002c4565b82525050565b60006020820190506200036360008301846200033b565b92915050565b60006200037682620002c4565b9050919050565b620003888162000369565b81146200039457600080fd5b50565b600081519050620003a8816200037d565b92915050565b600060208284031215620003c757620003c66200029f565b5b6000620003d78482850162000397565b91505092915050565b610dab80620003f06000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80635846431414610067578063715018a6146100975780637314156c146100a15780638da5cb5b146100bd578063a7e50014146100db578063f2fde38b146100f7575b600080fd5b610081600480360381019061007c91906108bc565b610113565b60405161008e919061090b565b60405180910390f35b61009f610144565b005b6100bb60048036038101906100b69190610984565b610158565b005b6100c56102d0565b6040516100d291906109e6565b60405180910390f35b6100f560048036038101906100f09190610a01565b6102f9565b005b610111600480360381019061010c9190610a54565b61066c565b005b6001602052816000526040600020818154811061012f57600080fd5b90600052602060002001600091509150505481565b61014c6106f2565b6101566000610779565b565b6101606106f2565b60008190505b6000600160008663ffffffff1663ffffffff1681526020019081526020016000208054905011156102ca576000600160008663ffffffff1663ffffffff16815260200190815260200160002060018060008863ffffffff1663ffffffff168152602001908152602001600020805490506101e09190610ab0565b815481106101f1576101f0610ae4565b5b906000526020600020015490508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3086846040518463ffffffff1660e01b815260040161023b93929190610b13565b6020604051808303816000875af115801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e9190610b82565b50600160008663ffffffff1663ffffffff1681526020019081526020016000208054806102ae576102ad610baf565b5b6001900381819060005260206000200160009055905550610166565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103016106f2565b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342f6487a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b69190610c1c565b6040518363ffffffff1660e01b81526004016103d3929190610c49565b602060405180830381865afa1580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190610c87565b905060027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104439190610ce3565b81101561057a578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342f6487a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f79190610c1c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610535929190610d14565b6020604051808303816000875af1158015610554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190610b82565b505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b54dc9de86886040518363ffffffff1660e01b81526004016105d9929190610d4c565b6020604051808303816000875af11580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c9190610c87565b9050600160008563ffffffff1663ffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055505050505050565b6106746106f2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106e65760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106dd91906109e6565b60405180910390fd5b6106ef81610779565b50565b6106fa61083d565b73ffffffffffffffffffffffffffffffffffffffff166107186102d0565b73ffffffffffffffffffffffffffffffffffffffff16146107775761073b61083d565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161076e91906109e6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600063ffffffff82169050919050565b6108638161084a565b811461086e57600080fd5b50565b6000813590506108808161085a565b92915050565b6000819050919050565b61089981610886565b81146108a457600080fd5b50565b6000813590506108b681610890565b92915050565b600080604083850312156108d3576108d2610845565b5b60006108e185828601610871565b92505060206108f2858286016108a7565b9150509250929050565b61090581610886565b82525050565b600060208201905061092060008301846108fc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061095182610926565b9050919050565b61096181610946565b811461096c57600080fd5b50565b60008135905061097e81610958565b92915050565b60008060006060848603121561099d5761099c610845565b5b60006109ab86828701610871565b93505060206109bc8682870161096f565b92505060406109cd8682870161096f565b9150509250925092565b6109e081610946565b82525050565b60006020820190506109fb60008301846109d7565b92915050565b600080600060608486031215610a1a57610a19610845565b5b6000610a288682870161096f565b9350506020610a3986828701610871565b9250506040610a4a86828701610871565b9150509250925092565b600060208284031215610a6a57610a69610845565b5b6000610a788482850161096f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610abb82610886565b9150610ac683610886565b9250828203905081811115610ade57610add610a81565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000606082019050610b2860008301866109d7565b610b3560208301856109d7565b610b4260408301846108fc565b949350505050565b60008115159050919050565b610b5f81610b4a565b8114610b6a57600080fd5b50565b600081519050610b7c81610b56565b92915050565b600060208284031215610b9857610b97610845565b5b6000610ba684828501610b6d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000610be982610946565b9050919050565b610bf981610bde565b8114610c0457600080fd5b50565b600081519050610c1681610bf0565b92915050565b600060208284031215610c3257610c31610845565b5b6000610c4084828501610c07565b91505092915050565b6000604082019050610c5e60008301856109d7565b610c6b60208301846109d7565b9392505050565b600081519050610c8181610890565b92915050565b600060208284031215610c9d57610c9c610845565b5b6000610cab84828501610c72565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cee82610886565b9150610cf983610886565b925082610d0957610d08610cb4565b5b828204905092915050565b6000604082019050610d2960008301856109d7565b610d3660208301846108fc565b9392505050565b610d468161084a565b82525050565b6000604082019050610d616000830185610d3d565b610d6e60208301846109d7565b939250505056fea2646970667358221220f48f9b5beb3c639d4c4b5949054cd9014b25ed19a3d195c16ef92e829dfb9f1764736f6c63430008150033";

type PurchaseProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PurchaseProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PurchaseProxy__factory extends ContractFactory {
  constructor(...args: PurchaseProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    storeAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(storeAddress, overrides || {});
  }
  override deploy(
    storeAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(storeAddress, overrides || {}) as Promise<
      PurchaseProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PurchaseProxy__factory {
    return super.connect(runner) as PurchaseProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PurchaseProxyInterface {
    return new Interface(_abi) as PurchaseProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PurchaseProxy {
    return new Contract(address, _abi, runner) as unknown as PurchaseProxy;
  }
}
