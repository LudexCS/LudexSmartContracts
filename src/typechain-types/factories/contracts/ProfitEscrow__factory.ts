/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ProfitEscrow,
  ProfitEscrowInterface,
} from "../../contracts/ProfitEscrow";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "itemRegistry_",
        type: "address",
      },
      {
        internalType: "address",
        name: "priceTable_",
        type: "address",
      },
      {
        internalType: "address",
        name: "forwarderAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newProcessor",
        type: "address",
      },
    ],
    name: "ProcessorUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ProfitAccumulated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ProfitClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ProfitPending",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ProfitSettled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "accumulate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "accumulatePendingProfit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getBalanceFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "itemID",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getPendingProfit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getWholePendingProfit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "itemRegistry",
    outputs: [
      {
        internalType: "contract ItemRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paymentProcessor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceTable",
    outputs: [
      {
        internalType: "contract PriceTable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "processor",
        type: "address",
      },
    ],
    name: "setPaymentProcessor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint32[]",
        name: "itemIDs",
        type: "uint32[]",
      },
    ],
    name: "settlePendingProfit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e0604052346200005a576200001f6200001862000159565b91620001de565b6200002962000060565b611baa620003fd823960805181610a2d015260a05181818161062f0152611148015260c051816101dd0152611baa90f35b62000066565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9062000097906200006b565b810190811060018060401b03821117620000b057604052565b62000075565b90620000cd620000c562000060565b92836200008b565b565b600080fd5b60018060a01b031690565b620000ea90620000d4565b90565b620000f881620000df565b036200010057565b600080fd5b905051906200011482620000ed565b565b909160608284031262000153576200015062000136846000850162000105565b9362000146816020860162000105565b9360400162000105565b90565b620000cf565b6200017c62001fa7803803806200017081620000b6565b92833981019062000116565b909192565b90565b6200019d62000197620001a392620000d4565b62000181565b620000d4565b90565b620001b19062000184565b90565b620001bf90620001a6565b90565b620001cd9062000184565b90565b620001db90620001c2565b90565b620001f990620001f362000202943362000207565b620001b4565b60a052620001d0565b60c052565b620002129162000214565b565b9062000220906200027f565b608052565b90565b620002416200023b620002479262000225565b62000181565b620000d4565b90565b620002559062000228565b90565b6200026390620000df565b9052565b91906200027d9060006020850194019062000258565b565b80620002a16200029a6200029460006200024a565b620000df565b91620000df565b14620002b457620002b2906200038f565b565b620002e5620002c460006200024a565b620002ce62000060565b918291631e4fbdf760e01b83526004830162000267565b0390fd5b60001c90565b60018060a01b031690565b620003096200030f91620002e9565b620002ef565b90565b6200031e9054620002fa565b90565b60001b90565b906200033a60018060a01b039162000321565b9181191691161790565b6200034f9062000184565b90565b6200035d9062000344565b90565b90565b906200037d62000377620003859262000352565b62000360565b825462000327565b9055565b60000190565b6200039b600062000312565b620003a882600062000363565b90620003e0620003d97f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000352565b9162000352565b91620003eb62000060565b80620003f78162000389565b0390a356fe60806040526004361015610013575b610801565b61001e60003561011d565b8063088b0d7514610118578063100f9bf81461011357806320bc0c8f1461010e578063275a7a4e14610109578063572b6c05146101045780635acf5d6d146100ff5780635e106fa7146100fa578063715018a6146100f55780637da0a877146100f05780638da5cb5b146100eb578063957047f6146100e65780639701aefc146100e1578063b92916d9146100dc578063f1c6bdf8146100d7578063f2fde38b146100d25763f5cb7c330361000e576107cb565b610798565b610763565b6106ea565b6106b5565b610680565b6105f8565b6105c3565b61056d565b610539565b6104ca565b610400565b6103a2565b61031d565b610259565b610198565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61014c90610138565b90565b61015881610143565b0361015f57565b600080fd5b905035906101718261014f565b565b9060208282031261018d5761018a91600001610164565b90565b61012e565b60000190565b346101c6576101b06101ab366004610173565b610cc4565b6101b8610123565b806101c281610192565b0390f35b610129565b60009103126101d657565b61012e565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61021661021161021b92610138565b6101ff565b610138565b90565b61022790610202565b90565b6102339061021e565b90565b61023f9061022a565b9052565b919061025790600060208501940190610236565b565b34610289576102693660046101cb565b6102856102746101db565b61027c610123565b91829182610243565b0390f35b610129565b63ffffffff1690565b6102a08161028e565b036102a757565b600080fd5b905035906102b982610297565b565b90565b6102c7816102bb565b036102ce57565b600080fd5b905035906102e0826102be565b565b9091606082840312610318576103156102fe84600085016102ac565b9361030c8160208601610164565b936040016102d3565b90565b61012e565b3461034c576103366103303660046102e2565b91610f05565b61033e610123565b8061034881610192565b0390f35b610129565b919060408382031261037a578061036e61037792600086016102ac565b93602001610164565b90565b61012e565b610388906102bb565b9052565b91906103a09060006020850194019061037f565b565b346103d3576103cf6103be6103b8366004610351565b9061153f565b6103c6610123565b9182918261038c565b0390f35b610129565b151590565b6103e6906103d8565b9052565b91906103fe906000602085019401906103dd565b565b346104305761042c61041b610416366004610173565b610a54565b610423610123565b918291826103ea565b0390f35b610129565b600080fd5b600080fd5b600080fd5b909182601f8301121561047e5781359167ffffffffffffffff831161047957602001926020830284011161047457565b61043f565b61043a565b610435565b9190916040818403126104c55761049d8360008301610164565b92602082013567ffffffffffffffff81116104c0576104bc9201610444565b9091565b610133565b61012e565b346104f9576104e36104dd366004610483565b91611b67565b6104eb610123565b806104f581610192565b0390f35b610129565b90916060828403126105345761053161051a84600085016102ac565b936105288160208601610164565b93604001610164565b90565b61012e565b346105685761055261054c3660046104fe565b9161150a565b61055a610123565b8061056481610192565b0390f35b610129565b3461059b5761057d3660046101cb565b610585610899565b61058d610123565b8061059781610192565b0390f35b610129565b6105a990610143565b9052565b91906105c1906000602085019401906105a0565b565b346105f3576105d33660046101cb565b6105ef6105de610a22565b6105e6610123565b918291826105ad565b0390f35b610129565b34610628576106083660046101cb565b610624610613610832565b61061b610123565b918291826105ad565b0390f35b610129565b7f000000000000000000000000000000000000000000000000000000000000000090565b61065a9061021e565b90565b61066690610651565b9052565b919061067e9060006020850194019061065d565b565b346106b0576106903660046101cb565b6106ac61069b61062d565b6106a3610123565b9182918261066a565b0390f35b610129565b346106e5576106e16106d06106cb366004610173565b611594565b6106d8610123565b9182918261038c565b0390f35b610129565b34610719576107036106fd3660046102e2565b91610ff8565b61070b610123565b8061071581610192565b0390f35b610129565b1c90565b60018060a01b031690565b61073d906008610742930261071e565b610722565b90565b90610750915461072d565b90565b6107606001600090610745565b90565b34610793576107733660046101cb565b61078f61077e610753565b610786610123565b918291826105ad565b0390f35b610129565b346107c6576107b06107ab366004610173565b610966565b6107b8610123565b806107c281610192565b0390f35b610129565b346107fc576107f86107e76107e1366004610351565b90611517565b6107ef610123565b9182918261038c565b0390f35b610129565b600080fd5b600090565b60001c90565b61081d6108229161080b565b610722565b90565b61082f9054610811565b90565b61083a610806565b506108456000610825565b90565b6108506108a3565b610858610885565b565b90565b61087161086c6108769261085a565b6101ff565b610138565b90565b6108829061085d565b90565b6108976108926000610879565b6109c1565b565b6108a1610848565b565b6108ab610832565b6108c46108be6108b9610a7a565b610143565b91610143565b036108cb57565b6108f46108d6610a7a565b6108de610123565b91829163118cdaa760e01b8352600483016105ad565b0390fd5b610909906109046108a3565b61090b565b565b8061092761092161091c6000610879565b610143565b91610143565b1461093757610935906109c1565b565b6109626109446000610879565b61094c610123565b918291631e4fbdf760e01b8352600483016105ad565b0390fd5b61096f906108f8565b565b60001b90565b9061098860018060a01b0391610971565b9181191691161790565b61099b9061021e565b90565b90565b906109b66109b16109bd92610992565b61099e565b8254610977565b9055565b6109cb6000610825565b6109d68260006109a1565b90610a0a610a047f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610992565b91610992565b91610a13610123565b80610a1d81610192565b0390a3565b610a2a610806565b507f000000000000000000000000000000000000000000000000000000000000000090565b600090565b610a5c610a4f565b50610a76610a70610a6b610a22565b610143565b91610143565b1490565b610a82610806565b50610a8b610b80565b90565b5090565b634e487b7160e01b600052601160045260246000fd5b610ab7610abd919392936102bb565b926102bb565b8203918211610ac857565b610a92565b600080fd5b600080fd5b90939293848311610af7578411610af2576001820201920390565b610ad2565b610acd565b6bffffffffffffffffffffffff191690565b1b90565b90610b20610b279183610a8e565b9135610afc565b9060148110610b35575b5090565b610b53906bffffffffffffffffffffffff1990601403600802610b0e565b1638610b31565b60601c90565b610b6c610b7191610b5a565b610202565b90565b610b7d90610b60565b90565b610b88610806565b50610b9560003690610a8e565b610b9d610c1b565b610ba633610a54565b80610bee575b600014610be157610bd3610bd991610bde93610bcb6000923692610aa8565b908092610ad7565b90610b12565b610b74565b90565b5050610beb610c09565b90565b5081610c02610bfc836102bb565b916102bb565b1015610bac565b610c11610806565b503390565b600090565b610c23610c16565b50610c2c610c4e565b90565b90565b610c46610c41610c4b92610c2f565b6101ff565b6102bb565b90565b610c56610c16565b50610c616014610c32565b90565b610c7590610c706108a3565b610c77565b565b610c828160016109a1565b610cac7f94d1eaaba297ffb0e6a23b867a3d6f936cca4ae0045709e596d461aee2e362ee91610992565b90610cb5610123565b80610cbf81610192565b0390a2565b610ccd90610c64565b565b60209181520190565b60007f4e6f7420617574686f72697a6564000000000000000000000000000000000000910152565b610d0d600e602092610ccf565b610d1681610cd8565b0190565b610d309060208101906000818303910152610d00565b90565b15610d3a57565b610d42610123565b62461bcd60e51b815280610d5860048201610d1a565b0390fd5b90610d939291610d8e610d6d610a7a565b610d88610d82610d7d6001610825565b610143565b91610143565b14610d33565b610e80565b565b610da9610da4610dae9261028e565b6101ff565b61028e565b90565b90610dbb90610d95565b600052602052604060002090565b90610dd390610992565b600052602052604060002090565b90565b610df0610df59161080b565b610de1565b90565b610e029054610de4565b90565b610e14610e1a919392936102bb565b926102bb565b8201809211610e2557565b610a92565b90610e3760001991610971565b9181191691161790565b610e55610e50610e5a926102bb565b6101ff565b6102bb565b90565b90565b90610e75610e70610e7c92610e41565b610e5d565b8254610e2a565b9055565b919091610eb582610eaf610ea0610e9960028690610db1565b8790610dc9565b91610eaa83610df8565b610e05565b90610e60565b919091610f00610eee610ee87fa5bad89c05c4fb73eb7cb9a2196edafb96670005a21bac4f045390455b04d71793610d95565b93610992565b93610ef7610123565b9182918261038c565b0390a3565b90610f109291610d5c565b565b90610f499291610f44610f23610a7a565b610f3e610f38610f336001610825565b610143565b91610143565b14610d33565b610f4b565b565b919091610f8082610f7a610f6b610f6460038690610db1565b8790610dc9565b91610f7583610df8565b610e05565b90610e60565b610fa882610fa2610f9360048790610dc9565b91610f9d83610df8565b610e05565b90610e60565b919091610ff3610fe1610fdb7f8a380b086402119b330c01eaa8a00474eae7482bf08248a14323966f0b75fabc93610d95565b93610992565b93610fea610123565b9182918261038c565b0390a3565b906110039291610f12565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061102f90611005565b810190811067ffffffffffffffff82111761104957604052565b61100f565b60e01b90565b905051906110618261014f565b565b9060208282031261107d5761107a91600001611054565b90565b61012e565b61108b9061028e565b9052565b91906110a390600060208501940190611082565b565b6110ad610123565b3d6000823e3d90fd5b60007f4e6f74206974656d2073656c6c65720000000000000000000000000000000000910152565b6110eb600f602092610ccf565b6110f4816110b6565b0190565b61110e90602081019060008183039101526110de565b90565b1561111857565b611120610123565b62461bcd60e51b815280611136600482016110f8565b0390fd5b90611193929160208161116c7f0000000000000000000000000000000000000000000000000000000000000000610651565b611188639479df9c61117c610123565b9889948593849361104e565b83526004830161108f565b03915afa938415611203576111d3946111ce916000916111d5575b506111c86111c26111bd610a7a565b610143565b91610143565b14611111565b6113b7565b565b6111f6915060203d81116111fc575b6111ee8183611025565b810190611063565b386111ae565b503d6111e4565b6110a5565b61121c6112176112219261085a565b6101ff565b6102bb565b90565b60007f4e6f7468696e6720746f20636c61696d00000000000000000000000000000000910152565b6112596010602092610ccf565b61126281611224565b0190565b61127c906020810190600081830391015261124c565b90565b1561128657565b61128e610123565b62461bcd60e51b8152806112a460048201611266565b0390fd5b6112b190610202565b90565b6112bd906112a8565b90565b6112c99061021e565b90565b6112d5816103d8565b036112dc57565b600080fd5b905051906112ee826112cc565b565b9060208282031261130a57611307916000016112e1565b90565b61012e565b91602061133192949361132a604082019660008301906105a0565b019061037f565b565b60007f5472616e73666572206661696c65640000000000000000000000000000000000910152565b611368600f602092610ccf565b61137181611333565b0190565b61138b906020810190600081830391015261135b565b90565b1561139557565b61139d610123565b62461bcd60e51b8152806113b360048201611375565b0390fd5b90916113d76113d26113cb60028590610db1565b8590610dc9565b610df8565b916113f5836113ef6113e96000611208565b916102bb565b1161127f565b61141d6114026000611208565b61141861141160028590610db1565b8790610dc9565b610e60565b61142e611429856112b4565b6112c0565b602063a9059cbb9184906114566000889561146161144a610123565b9788968795869461104e565b84526004840161130f565b03925af180156115055761147d916000916114d7575b5061138e565b929091926114d26114c06114ba6114b47fbff0385f9eb39f0d66c723731d5e5d7c09e140ba89161769e6bee4969f9b8eab94610d95565b94610992565b94610992565b946114c9610123565b9182918261038c565b0390a4565b6114f8915060203d81116114fe575b6114f08183611025565b8101906112f0565b38611477565b503d6114e6565b6110a5565b90611515929161113a565b565b61153c916115326115379261152a610c16565b506002610db1565b610dc9565b610df8565b90565b6115649161155a61155f92611552610c16565b506003610db1565b610dc9565b610df8565b90565b90611579916115746108a3565b61157c565b90565b6115919161158c91506004610dc9565b610df8565b90565b6115a5906115a0610c16565b611567565b90565b906115bb92916115b66108a3565b61180b565b565b6115c6906102bb565b60001981146115d55760010190565b610a92565b5090565b634e487b7160e01b600052603260045260246000fd5b9190811015611604576020020190565b6115de565b3561161381610297565b90565b9190600861163291029161162c60001984610b0e565b92610b0e565b9181191691161790565b919061165261164d61165a93610e41565b610e5d565b908354611616565b9055565b6116709161166a610c16565b9161163c565b565b61167b9061021e565b90565b9050519061168b826102be565b565b906020828203126116a7576116a49160000161167e565b90565b61012e565b9160206116ce9294936116c7604082019660008301906105a0565b01906105a0565b565b60007f546f6b656e206973206e6f7420616c6c6f776564000000000000000000000000910152565b6117056014602092610ccf565b61170e816116d0565b0190565b61172890602081019060008183039101526116f8565b90565b1561173257565b61173a610123565b62461bcd60e51b81528061175060048201611712565b0390fd5b60007f4e6f7420656e6f75676820746f6b656e00000000000000000000000000000000910152565b6117896010602092610ccf565b61179281611754565b0190565b6117ac906020810190600081830391015261177c565b90565b156117b657565b6117be610123565b62461bcd60e51b8152806117d460048201611796565b0390fd5b60409061180261180994969593966117f8606084019860008501906105a0565b60208301906105a0565b019061037f565b565b92909192611818816112b4565b926118236000611208565b9261182e6000611208565b5b8061184c611846611841868b906115da565b6102bb565b916102bb565b101561191557611866611861848984916115f4565b611609565b61188461187f61187860038490610db1565b8790610dc9565b610df8565b806118986118926000611208565b916102bb565b116118ae575b50506118a9906115bd565b61182f565b60006119096119026118fa859a856118f46118a999986118ee6118df8f6118da61190e9c946002610db1565b610dc9565b916118e983610df8565b610e05565b90610e60565b90610e05565b996003610db1565b8890610dc9565b61165e565b903861189e565b509450506119449092919261193e61192f85926004610dc9565b9161193983610df8565b610aa8565b90610e60565b61194d816112c0565b90602063dd62ed3e9261195e610832565b9061198361196b30611672565b9561198e611977610123565b9788958694859461104e565b8452600484016116ac565b03915afa918215611b62576119ff926119c391600091611b34575b506119bc6119b6866102bb565b916102bb565b101561172b565b60206119ce826112c0565b6370a08231906119f46119df610832565b926119e8610123565b9687948593849361104e565b8352600483016105ad565b03915afa908115611b2f57611a36611a3b92602094600091611b02575b50611a2f611a29876102bb565b916102bb565b10156117af565b6112c0565b6323b872dd90611a706000611a4e610832565b93611a7b611a5b30611672565b97611a64610123565b9889978896879561104e565b8552600485016117d8565b03925af18015611afd57611a9791600091611acf575b5061138e565b7f439bbfbccaaca82005d1f9239bdb7abbe32052e1319c3a1fe94264e3ec14b09e611ac0610123565b80611aca81610192565b0390a1565b611af0915060203d8111611af6575b611ae88183611025565b8101906112f0565b38611a91565b503d611ade565b6110a5565b611b229150853d8111611b28575b611b1a8183611025565b81019061168d565b38611a1c565b503d611b10565b6110a5565b611b55915060203d8111611b5b575b611b4d8183611025565b81019061168d565b386119a9565b503d611b43565b6110a5565b90611b7292916115a8565b56fea2646970667358221220c32090525addba5e23cea4385c7d03dcde946435e09d0aecefa596783db998dc64736f6c63430008150033";

type ProfitEscrowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProfitEscrowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProfitEscrow__factory extends ContractFactory {
  constructor(...args: ProfitEscrowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    itemRegistry_: AddressLike,
    priceTable_: AddressLike,
    forwarderAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      itemRegistry_,
      priceTable_,
      forwarderAddress,
      overrides || {}
    );
  }
  override deploy(
    itemRegistry_: AddressLike,
    priceTable_: AddressLike,
    forwarderAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      itemRegistry_,
      priceTable_,
      forwarderAddress,
      overrides || {}
    ) as Promise<
      ProfitEscrow & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ProfitEscrow__factory {
    return super.connect(runner) as ProfitEscrow__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProfitEscrowInterface {
    return new Interface(_abi) as ProfitEscrowInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ProfitEscrow {
    return new Contract(address, _abi, runner) as unknown as ProfitEscrow;
  }
}
