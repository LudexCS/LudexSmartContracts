/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ItemRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "itemRevenueSharers"
      | "nameHash"
      | "numberOfSharers"
      | "owner"
      | "registerItem"
      | "renounceOwnership"
      | "resumeItemSale"
      | "revenueSharerOfItem"
      | "revenueSharingItems"
      | "seller"
      | "setPriceTable"
      | "suspendItemSale"
      | "timestampRegistered"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ItemRegistered"
      | "ItemSaleResumed"
      | "ItemSaleSuspended"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "itemRevenueSharers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nameHash", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numberOfSharers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerItem",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeItemSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueSharerOfItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueSharingItems",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seller",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceTable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendItemSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "itemRevenueSharers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nameHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfSharers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeItemSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueSharerOfItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueSharingItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendItemSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ItemRegisteredEvent {
  export type InputTuple = [
    itemName: BytesLike,
    seller: AddressLike,
    itemID: BigNumberish,
    usdPrice: BigNumberish,
    shareItemIDs: BigNumberish[]
  ];
  export type OutputTuple = [
    itemName: string,
    seller: string,
    itemID: bigint,
    usdPrice: bigint,
    shareItemIDs: bigint[]
  ];
  export interface OutputObject {
    itemName: string;
    seller: string;
    itemID: bigint;
    usdPrice: bigint;
    shareItemIDs: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemSaleResumedEvent {
  export type InputTuple = [itemID: BigNumberish, resumed: BigNumberish[]];
  export type OutputTuple = [itemID: bigint, resumed: bigint[]];
  export interface OutputObject {
    itemID: bigint;
    resumed: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemSaleSuspendedEvent {
  export type InputTuple = [itemID: BigNumberish, suspension: BigNumberish[]];
  export type OutputTuple = [itemID: bigint, suspension: bigint[]];
  export interface OutputObject {
    itemID: bigint;
    suspension: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ItemRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ItemRegistry;
  waitForDeployment(): Promise<this>;

  interface: ItemRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  itemRevenueSharers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  nameHash: TypedContractMethod<[nameToHash: string], [string], "view">;

  numberOfSharers: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerItem: TypedContractMethod<
    [
      itemNameHash: BytesLike,
      seller_: AddressLike,
      revenueSharers: BigNumberish[],
      usdPrice: BigNumberish,
      shareTerms: BigNumberish[],
      shares: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resumeItemSale: TypedContractMethod<
    [itemID: BigNumberish],
    [void],
    "nonpayable"
  >;

  revenueSharerOfItem: TypedContractMethod<
    [itemID: BigNumberish, index: BigNumberish],
    [bigint],
    "view"
  >;

  revenueSharingItems: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  seller: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setPriceTable: TypedContractMethod<
    [priceTableAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  suspendItemSale: TypedContractMethod<
    [itemID: BigNumberish],
    [void],
    "nonpayable"
  >;

  timestampRegistered: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "itemRevenueSharers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nameHash"
  ): TypedContractMethod<[nameToHash: string], [string], "view">;
  getFunction(
    nameOrSignature: "numberOfSharers"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerItem"
  ): TypedContractMethod<
    [
      itemNameHash: BytesLike,
      seller_: AddressLike,
      revenueSharers: BigNumberish[],
      usdPrice: BigNumberish,
      shareTerms: BigNumberish[],
      shares: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeItemSale"
  ): TypedContractMethod<[itemID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revenueSharerOfItem"
  ): TypedContractMethod<
    [itemID: BigNumberish, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "revenueSharingItems"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setPriceTable"
  ): TypedContractMethod<
    [priceTableAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "suspendItemSale"
  ): TypedContractMethod<[itemID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timestampRegistered"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ItemRegistered"
  ): TypedContractEvent<
    ItemRegisteredEvent.InputTuple,
    ItemRegisteredEvent.OutputTuple,
    ItemRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ItemSaleResumed"
  ): TypedContractEvent<
    ItemSaleResumedEvent.InputTuple,
    ItemSaleResumedEvent.OutputTuple,
    ItemSaleResumedEvent.OutputObject
  >;
  getEvent(
    key: "ItemSaleSuspended"
  ): TypedContractEvent<
    ItemSaleSuspendedEvent.InputTuple,
    ItemSaleSuspendedEvent.OutputTuple,
    ItemSaleSuspendedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ItemRegistered(bytes32,address,uint32,uint256,uint32[])": TypedContractEvent<
      ItemRegisteredEvent.InputTuple,
      ItemRegisteredEvent.OutputTuple,
      ItemRegisteredEvent.OutputObject
    >;
    ItemRegistered: TypedContractEvent<
      ItemRegisteredEvent.InputTuple,
      ItemRegisteredEvent.OutputTuple,
      ItemRegisteredEvent.OutputObject
    >;

    "ItemSaleResumed(uint32,uint32[])": TypedContractEvent<
      ItemSaleResumedEvent.InputTuple,
      ItemSaleResumedEvent.OutputTuple,
      ItemSaleResumedEvent.OutputObject
    >;
    ItemSaleResumed: TypedContractEvent<
      ItemSaleResumedEvent.InputTuple,
      ItemSaleResumedEvent.OutputTuple,
      ItemSaleResumedEvent.OutputObject
    >;

    "ItemSaleSuspended(uint32,uint32[])": TypedContractEvent<
      ItemSaleSuspendedEvent.InputTuple,
      ItemSaleSuspendedEvent.OutputTuple,
      ItemSaleSuspendedEvent.OutputObject
    >;
    ItemSaleSuspended: TypedContractEvent<
      ItemSaleSuspendedEvent.InputTuple,
      ItemSaleSuspendedEvent.OutputTuple,
      ItemSaleSuspendedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
